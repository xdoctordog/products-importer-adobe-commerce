<?php

declare(strict_types=1);

namespace DoctorDogg\ProductsImporter\Model\Import;

use Magento\Framework\Model\ResourceModel\Db\Context as ResourceModelDbContext;
use Magento\ImportExport\Model\ResourceModel\Import\Data as ImportDataResourceModel;
use Magento\Framework\Json\Helper\Data as JsonHelper;
use \DoctorDogg\ProductsImporter\Api\RequiredProductAttributesInterface;

/**
 * The class provides information for importing products, using data which are set by addProductInfo() method.
 *
 * Re-write: Magento\ImportExport\Model\ResourceModel\Import\Data
 */
class DataSource extends ImportDataResourceModel
{
    /**
     * The products info which are represented as the array with info.
     *
     * @var array
     */
    private $productsInfo = [];

    /**
     * Plays the role of a pointer to the array element
     * with information about buffer product, which is also array.
     *
     * @var int
     */
    private $iCurrent = 0;

    /**
     * Array with necessary fields for the importing process.
     *
     * @var array[]
     */
    public $dataRow = [
        [
            RequiredProductAttributesInterface::SKU => null,
            RequiredProductAttributesInterface::PRODUCT_TYPE => "simple",
            RequiredProductAttributesInterface::NAME => "Jordan Jacket",
            RequiredProductAttributesInterface::PRICE => 10,
            RequiredProductAttributesInterface::URL_KEY => null,
            //additional fields
            RequiredProductAttributesInterface::_ATTRIBUTE_SET => "Default"
        ]
    ];

    /**
     * @caution: Some kind of hack.
     * We need not regenerate products for the second request to this class.
     *
     * @var bool $isFirstRequest
     */
    private static $isFirstRequest = true;

    /**
     * Constructor.
     *
     * @param ResourceModelDbContext $context
     * @param JsonHelper $jsonHelper
     * @param null $connectionName
     */
    public function __construct(
        ResourceModelDbContext $context,
        JsonHelper $jsonHelper,
        $connectionName = null
    ) {
        parent::__construct($context, $jsonHelper, $connectionName);

        $skuPostfix = function () {
            $result = '';
            $alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
                's', 't', 'u', 'v', 'w', 'x', 'y', 'z' ];
            $cnt = count($alphabet);
            for ($i = 0; $i < 32; $i ++) {
                $result .= $alphabet[mt_rand(0, $cnt - 1)];
            }
            return $result;
        };
        for ($i = 0; $i < 1; $i ++) {
            if ($i > 0) {
                $this->dataRow[$i] = $this->dataRow[$i - 1];
            }
            $sku = $skuPostfix();
            $this->dataRow[$i]['sku'] = $sku;
            $this->dataRow[$i]['url_key'] = $sku;
        }
    }

    /**
     * Re-implementation of the core method:
     * \Magento\ImportExport\Model\ResourceModel\Import\Data::getNextBunch()
     *
     * @return array|array[]|mixed
     */
    public function getNextBunch()
    {
        if (!\is_array($this->productsInfo)) {
            return [];
        }

        if (self::$isFirstRequest) {
            self::$isFirstRequest = false;
            $dataRow = $this->productsInfo;
        } else {
            self::$isFirstRequest = true;
            $dataRow = [];
        }

        return $dataRow;
    }

    /**
     * @todo: We are not using it in the moment.
     * @todo: It can be used for auto-generating product inside this class and then use them in the import process.
     *
     * Re-implementation of the core method:
     * \Magento\ImportExport\Model\ResourceModel\Import\Data::getNextBunch()
     *
     * @return array|array[]|mixed
     */
    public function getAutoGeneratedNextBunch()
    {
        if (self::$isFirstRequest) {
            self::$isFirstRequest = false;
            $dataRow = $this->dataRow;
        } else {
            self::$isFirstRequest = true;
            $dataRow = [];
        }
        return $dataRow;
    }

    /**
     * Add product info in array for the next importing process.
     *
     * @param array $productInfo
     * @return void
     */
    public function addProductInfo(array $productInfo)
    {
        $this->productsInfo[] = $productInfo;
    }

    /**
     * Some little hack.
     *
     * @param $ids
     * @return array|array[]|mixed
     */
    public function getNextUniqueBunch($ids = null)
    {
        return $this->getNextBunch();
    }

    /**
     * No actions are needed by default.
     * We are not planning to use Magento Core functionality for saving in resource table.
     *
     * @param string $entity
     * @param string $behavior
     * @param array $data
     * @return int
     */
    public function saveBunch($entity, $behavior, array $data)
    {
    }
}
